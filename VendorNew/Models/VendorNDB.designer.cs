#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace VendorNew.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Vendor_new")]
	public partial class VendorNDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertAuthorities(Authorities instance);
    partial void UpdateAuthorities(Authorities instance);
    partial void DeleteAuthorities(Authorities instance);
    partial void InsertEventLog(EventLog instance);
    partial void UpdateEventLog(EventLog instance);
    partial void DeleteEventLog(EventLog instance);
    partial void InsertGroupAuthorities(GroupAuthorities instance);
    partial void UpdateGroupAuthorities(GroupAuthorities instance);
    partial void DeleteGroupAuthorities(GroupAuthorities instance);
    partial void InsertGroups(Groups instance);
    partial void UpdateGroups(Groups instance);
    partial void DeleteGroups(Groups instance);
    partial void InsertGroupUsers(GroupUsers instance);
    partial void UpdateGroupUsers(GroupUsers instance);
    partial void DeleteGroupUsers(GroupUsers instance);
    partial void InsertSystemNos(SystemNos instance);
    partial void UpdateSystemNos(SystemNos instance);
    partial void DeleteSystemNos(SystemNos instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public VendorNDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Vendor_newConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VendorNDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VendorNDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VendorNDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VendorNDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Authorities> Authorities
		{
			get
			{
				return this.GetTable<Authorities>();
			}
		}
		
		public System.Data.Linq.Table<EventLog> EventLog
		{
			get
			{
				return this.GetTable<EventLog>();
			}
		}
		
		public System.Data.Linq.Table<GroupAuthorities> GroupAuthorities
		{
			get
			{
				return this.GetTable<GroupAuthorities>();
			}
		}
		
		public System.Data.Linq.Table<Groups> Groups
		{
			get
			{
				return this.GetTable<Groups>();
			}
		}
		
		public System.Data.Linq.Table<GroupUsers> GroupUsers
		{
			get
			{
				return this.GetTable<GroupUsers>();
			}
		}
		
		public System.Data.Linq.Table<SystemNos> SystemNos
		{
			get
			{
				return this.GetTable<SystemNos>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Authorities")]
	public partial class Authorities : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _auth_id;
		
		private string _name;
		
		private string _en_name;
		
		private string _comment;
		
		private EntitySet<GroupAuthorities> _GroupAuthorities;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onauth_idChanging(int value);
    partial void Onauth_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onen_nameChanging(string value);
    partial void Onen_nameChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public Authorities()
		{
			this._GroupAuthorities = new EntitySet<GroupAuthorities>(new Action<GroupAuthorities>(this.attach_GroupAuthorities), new Action<GroupAuthorities>(this.detach_GroupAuthorities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_auth_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int auth_id
		{
			get
			{
				return this._auth_id;
			}
			set
			{
				if ((this._auth_id != value))
				{
					this.Onauth_idChanging(value);
					this.SendPropertyChanging();
					this._auth_id = value;
					this.SendPropertyChanged("auth_id");
					this.Onauth_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(200)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_en_name", DbType="VarChar(200)")]
		public string en_name
		{
			get
			{
				return this._en_name;
			}
			set
			{
				if ((this._en_name != value))
				{
					this.Onen_nameChanging(value);
					this.SendPropertyChanging();
					this._en_name = value;
					this.SendPropertyChanged("en_name");
					this.Onen_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(500)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Authorities_GroupAuthorities", Storage="_GroupAuthorities", ThisKey="auth_id", OtherKey="auth_id")]
		public EntitySet<GroupAuthorities> GroupAuthorities
		{
			get
			{
				return this._GroupAuthorities;
			}
			set
			{
				this._GroupAuthorities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupAuthorities(GroupAuthorities entity)
		{
			this.SendPropertyChanging();
			entity.Authorities = this;
		}
		
		private void detach_GroupAuthorities(GroupAuthorities entity)
		{
			this.SendPropertyChanging();
			entity.Authorities = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventLog")]
	public partial class EventLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _log_id;
		
		private string _user_name;
		
		private string _module;
		
		private string _sys_num;
		
		private string _do_what;
		
		private bool _is_normal;
		
		private System.Nullable<System.DateTime> _op_time;
		
		private string _ip;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onlog_idChanging(int value);
    partial void Onlog_idChanged();
    partial void Onuser_nameChanging(string value);
    partial void Onuser_nameChanged();
    partial void OnmoduleChanging(string value);
    partial void OnmoduleChanged();
    partial void Onsys_numChanging(string value);
    partial void Onsys_numChanged();
    partial void Ondo_whatChanging(string value);
    partial void Ondo_whatChanged();
    partial void Onis_normalChanging(bool value);
    partial void Onis_normalChanged();
    partial void Onop_timeChanging(System.Nullable<System.DateTime> value);
    partial void Onop_timeChanged();
    partial void OnipChanging(string value);
    partial void OnipChanged();
    #endregion
		
		public EventLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_log_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int log_id
		{
			get
			{
				return this._log_id;
			}
			set
			{
				if ((this._log_id != value))
				{
					this.Onlog_idChanging(value);
					this.SendPropertyChanging();
					this._log_id = value;
					this.SendPropertyChanged("log_id");
					this.Onlog_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_name", DbType="VarChar(50)")]
		public string user_name
		{
			get
			{
				return this._user_name;
			}
			set
			{
				if ((this._user_name != value))
				{
					this.Onuser_nameChanging(value);
					this.SendPropertyChanging();
					this._user_name = value;
					this.SendPropertyChanged("user_name");
					this.Onuser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_module", DbType="VarChar(50)")]
		public string module
		{
			get
			{
				return this._module;
			}
			set
			{
				if ((this._module != value))
				{
					this.OnmoduleChanging(value);
					this.SendPropertyChanging();
					this._module = value;
					this.SendPropertyChanged("module");
					this.OnmoduleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sys_num", DbType="VarChar(50)")]
		public string sys_num
		{
			get
			{
				return this._sys_num;
			}
			set
			{
				if ((this._sys_num != value))
				{
					this.Onsys_numChanging(value);
					this.SendPropertyChanging();
					this._sys_num = value;
					this.SendPropertyChanged("sys_num");
					this.Onsys_numChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_do_what", DbType="VarChar(500)")]
		public string do_what
		{
			get
			{
				return this._do_what;
			}
			set
			{
				if ((this._do_what != value))
				{
					this.Ondo_whatChanging(value);
					this.SendPropertyChanging();
					this._do_what = value;
					this.SendPropertyChanged("do_what");
					this.Ondo_whatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_normal", DbType="Bit NOT NULL")]
		public bool is_normal
		{
			get
			{
				return this._is_normal;
			}
			set
			{
				if ((this._is_normal != value))
				{
					this.Onis_normalChanging(value);
					this.SendPropertyChanging();
					this._is_normal = value;
					this.SendPropertyChanged("is_normal");
					this.Onis_normalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_op_time", DbType="DateTime")]
		public System.Nullable<System.DateTime> op_time
		{
			get
			{
				return this._op_time;
			}
			set
			{
				if ((this._op_time != value))
				{
					this.Onop_timeChanging(value);
					this.SendPropertyChanging();
					this._op_time = value;
					this.SendPropertyChanged("op_time");
					this.Onop_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ip", DbType="VarChar(50)")]
		public string ip
		{
			get
			{
				return this._ip;
			}
			set
			{
				if ((this._ip != value))
				{
					this.OnipChanging(value);
					this.SendPropertyChanging();
					this._ip = value;
					this.SendPropertyChanged("ip");
					this.OnipChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupAuthorities")]
	public partial class GroupAuthorities : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _group_auth_id;
		
		private System.Nullable<int> _group_id;
		
		private System.Nullable<int> _auth_id;
		
		private EntityRef<Authorities> _Authorities;
		
		private EntityRef<Groups> _Groups;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongroup_auth_idChanging(int value);
    partial void Ongroup_auth_idChanged();
    partial void Ongroup_idChanging(System.Nullable<int> value);
    partial void Ongroup_idChanged();
    partial void Onauth_idChanging(System.Nullable<int> value);
    partial void Onauth_idChanged();
    #endregion
		
		public GroupAuthorities()
		{
			this._Authorities = default(EntityRef<Authorities>);
			this._Groups = default(EntityRef<Groups>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_auth_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int group_auth_id
		{
			get
			{
				return this._group_auth_id;
			}
			set
			{
				if ((this._group_auth_id != value))
				{
					this.Ongroup_auth_idChanging(value);
					this.SendPropertyChanging();
					this._group_auth_id = value;
					this.SendPropertyChanged("group_auth_id");
					this.Ongroup_auth_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_id", DbType="Int")]
		public System.Nullable<int> group_id
		{
			get
			{
				return this._group_id;
			}
			set
			{
				if ((this._group_id != value))
				{
					if (this._Groups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongroup_idChanging(value);
					this.SendPropertyChanging();
					this._group_id = value;
					this.SendPropertyChanged("group_id");
					this.Ongroup_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_auth_id", DbType="Int")]
		public System.Nullable<int> auth_id
		{
			get
			{
				return this._auth_id;
			}
			set
			{
				if ((this._auth_id != value))
				{
					if (this._Authorities.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onauth_idChanging(value);
					this.SendPropertyChanging();
					this._auth_id = value;
					this.SendPropertyChanged("auth_id");
					this.Onauth_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Authorities_GroupAuthorities", Storage="_Authorities", ThisKey="auth_id", OtherKey="auth_id", IsForeignKey=true)]
		public Authorities Authorities
		{
			get
			{
				return this._Authorities.Entity;
			}
			set
			{
				Authorities previousValue = this._Authorities.Entity;
				if (((previousValue != value) 
							|| (this._Authorities.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Authorities.Entity = null;
						previousValue.GroupAuthorities.Remove(this);
					}
					this._Authorities.Entity = value;
					if ((value != null))
					{
						value.GroupAuthorities.Add(this);
						this._auth_id = value.auth_id;
					}
					else
					{
						this._auth_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Authorities");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_GroupAuthorities", Storage="_Groups", ThisKey="group_id", OtherKey="group_id", IsForeignKey=true)]
		public Groups Groups
		{
			get
			{
				return this._Groups.Entity;
			}
			set
			{
				Groups previousValue = this._Groups.Entity;
				if (((previousValue != value) 
							|| (this._Groups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Groups.Entity = null;
						previousValue.GroupAuthorities.Remove(this);
					}
					this._Groups.Entity = value;
					if ((value != null))
					{
						value.GroupAuthorities.Add(this);
						this._group_id = value.group_id;
					}
					else
					{
						this._group_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Groups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Groups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _group_id;
		
		private string _name;
		
		private string _comment;
		
		private EntitySet<GroupAuthorities> _GroupAuthorities;
		
		private EntitySet<GroupUsers> _GroupUsers;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongroup_idChanging(int value);
    partial void Ongroup_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public Groups()
		{
			this._GroupAuthorities = new EntitySet<GroupAuthorities>(new Action<GroupAuthorities>(this.attach_GroupAuthorities), new Action<GroupAuthorities>(this.detach_GroupAuthorities));
			this._GroupUsers = new EntitySet<GroupUsers>(new Action<GroupUsers>(this.attach_GroupUsers), new Action<GroupUsers>(this.detach_GroupUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int group_id
		{
			get
			{
				return this._group_id;
			}
			set
			{
				if ((this._group_id != value))
				{
					this.Ongroup_idChanging(value);
					this.SendPropertyChanging();
					this._group_id = value;
					this.SendPropertyChanged("group_id");
					this.Ongroup_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(200)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_GroupAuthorities", Storage="_GroupAuthorities", ThisKey="group_id", OtherKey="group_id")]
		public EntitySet<GroupAuthorities> GroupAuthorities
		{
			get
			{
				return this._GroupAuthorities;
			}
			set
			{
				this._GroupAuthorities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_GroupUsers", Storage="_GroupUsers", ThisKey="group_id", OtherKey="group_id")]
		public EntitySet<GroupUsers> GroupUsers
		{
			get
			{
				return this._GroupUsers;
			}
			set
			{
				this._GroupUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupAuthorities(GroupAuthorities entity)
		{
			this.SendPropertyChanging();
			entity.Groups = this;
		}
		
		private void detach_GroupAuthorities(GroupAuthorities entity)
		{
			this.SendPropertyChanging();
			entity.Groups = null;
		}
		
		private void attach_GroupUsers(GroupUsers entity)
		{
			this.SendPropertyChanging();
			entity.Groups = this;
		}
		
		private void detach_GroupUsers(GroupUsers entity)
		{
			this.SendPropertyChanging();
			entity.Groups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupUsers")]
	public partial class GroupUsers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _group_user_id;
		
		private System.Nullable<int> _group_id;
		
		private System.Nullable<int> _user_id;
		
		private EntityRef<Groups> _Groups;
		
		private EntityRef<Users> _Users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongroup_user_idChanging(int value);
    partial void Ongroup_user_idChanged();
    partial void Ongroup_idChanging(System.Nullable<int> value);
    partial void Ongroup_idChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    #endregion
		
		public GroupUsers()
		{
			this._Groups = default(EntityRef<Groups>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int group_user_id
		{
			get
			{
				return this._group_user_id;
			}
			set
			{
				if ((this._group_user_id != value))
				{
					this.Ongroup_user_idChanging(value);
					this.SendPropertyChanging();
					this._group_user_id = value;
					this.SendPropertyChanged("group_user_id");
					this.Ongroup_user_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_id", DbType="Int")]
		public System.Nullable<int> group_id
		{
			get
			{
				return this._group_id;
			}
			set
			{
				if ((this._group_id != value))
				{
					if (this._Groups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongroup_idChanging(value);
					this.SendPropertyChanging();
					this._group_id = value;
					this.SendPropertyChanged("group_id");
					this.Ongroup_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_GroupUsers", Storage="_Groups", ThisKey="group_id", OtherKey="group_id", IsForeignKey=true)]
		public Groups Groups
		{
			get
			{
				return this._Groups.Entity;
			}
			set
			{
				Groups previousValue = this._Groups.Entity;
				if (((previousValue != value) 
							|| (this._Groups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Groups.Entity = null;
						previousValue.GroupUsers.Remove(this);
					}
					this._Groups.Entity = value;
					if ((value != null))
					{
						value.GroupUsers.Add(this);
						this._group_id = value.group_id;
					}
					else
					{
						this._group_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Groups");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_GroupUsers", Storage="_Users", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.GroupUsers.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.GroupUsers.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemNos")]
	public partial class SystemNos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _num_id;
		
		private string _prefix1;
		
		private string _prefix2;
		
		private int _current_num;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onnum_idChanging(int value);
    partial void Onnum_idChanged();
    partial void Onprefix1Changing(string value);
    partial void Onprefix1Changed();
    partial void Onprefix2Changing(string value);
    partial void Onprefix2Changed();
    partial void Oncurrent_numChanging(int value);
    partial void Oncurrent_numChanged();
    #endregion
		
		public SystemNos()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_num_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int num_id
		{
			get
			{
				return this._num_id;
			}
			set
			{
				if ((this._num_id != value))
				{
					this.Onnum_idChanging(value);
					this.SendPropertyChanging();
					this._num_id = value;
					this.SendPropertyChanged("num_id");
					this.Onnum_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prefix1", DbType="VarChar(20)")]
		public string prefix1
		{
			get
			{
				return this._prefix1;
			}
			set
			{
				if ((this._prefix1 != value))
				{
					this.Onprefix1Changing(value);
					this.SendPropertyChanging();
					this._prefix1 = value;
					this.SendPropertyChanged("prefix1");
					this.Onprefix1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prefix2", DbType="VarChar(20)")]
		public string prefix2
		{
			get
			{
				return this._prefix2;
			}
			set
			{
				if ((this._prefix2 != value))
				{
					this.Onprefix2Changing(value);
					this.SendPropertyChanging();
					this._prefix2 = value;
					this.SendPropertyChanged("prefix2");
					this.Onprefix2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_current_num", DbType="Int NOT NULL")]
		public int current_num
		{
			get
			{
				return this._current_num;
			}
			set
			{
				if ((this._current_num != value))
				{
					this.Oncurrent_numChanging(value);
					this.SendPropertyChanging();
					this._current_num = value;
					this.SendPropertyChanged("current_num");
					this.Oncurrent_numChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private string _user_name;
		
		private string _real_name;
		
		private string _password;
		
		private string _user_role;
		
		private string _email;
		
		private bool _is_forbit;
		
		private System.DateTime _in_date;
		
		private System.Nullable<System.DateTime> _forbit_date;
		
		private string _forbit_reason;
		
		private System.Nullable<System.DateTime> _last_login_date;
		
		private System.Nullable<int> _continual_error_times;
		
		private string _comment;
		
		private EntitySet<GroupUsers> _GroupUsers;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onuser_nameChanging(string value);
    partial void Onuser_nameChanged();
    partial void Onreal_nameChanging(string value);
    partial void Onreal_nameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onuser_roleChanging(string value);
    partial void Onuser_roleChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onis_forbitChanging(bool value);
    partial void Onis_forbitChanged();
    partial void Onin_dateChanging(System.DateTime value);
    partial void Onin_dateChanged();
    partial void Onforbit_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onforbit_dateChanged();
    partial void Onforbit_reasonChanging(string value);
    partial void Onforbit_reasonChanged();
    partial void Onlast_login_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onlast_login_dateChanged();
    partial void Oncontinual_error_timesChanging(System.Nullable<int> value);
    partial void Oncontinual_error_timesChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public Users()
		{
			this._GroupUsers = new EntitySet<GroupUsers>(new Action<GroupUsers>(this.attach_GroupUsers), new Action<GroupUsers>(this.detach_GroupUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string user_name
		{
			get
			{
				return this._user_name;
			}
			set
			{
				if ((this._user_name != value))
				{
					this.Onuser_nameChanging(value);
					this.SendPropertyChanging();
					this._user_name = value;
					this.SendPropertyChanged("user_name");
					this.Onuser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_real_name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string real_name
		{
			get
			{
				return this._real_name;
			}
			set
			{
				if ((this._real_name != value))
				{
					this.Onreal_nameChanging(value);
					this.SendPropertyChanging();
					this._real_name = value;
					this.SendPropertyChanged("real_name");
					this.Onreal_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Char(32) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_role", DbType="VarChar(20)")]
		public string user_role
		{
			get
			{
				return this._user_role;
			}
			set
			{
				if ((this._user_role != value))
				{
					this.Onuser_roleChanging(value);
					this.SendPropertyChanging();
					this._user_role = value;
					this.SendPropertyChanged("user_role");
					this.Onuser_roleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(500)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_forbit", DbType="Bit NOT NULL")]
		public bool is_forbit
		{
			get
			{
				return this._is_forbit;
			}
			set
			{
				if ((this._is_forbit != value))
				{
					this.Onis_forbitChanging(value);
					this.SendPropertyChanging();
					this._is_forbit = value;
					this.SendPropertyChanged("is_forbit");
					this.Onis_forbitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_in_date", DbType="DateTime NOT NULL")]
		public System.DateTime in_date
		{
			get
			{
				return this._in_date;
			}
			set
			{
				if ((this._in_date != value))
				{
					this.Onin_dateChanging(value);
					this.SendPropertyChanging();
					this._in_date = value;
					this.SendPropertyChanged("in_date");
					this.Onin_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forbit_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> forbit_date
		{
			get
			{
				return this._forbit_date;
			}
			set
			{
				if ((this._forbit_date != value))
				{
					this.Onforbit_dateChanging(value);
					this.SendPropertyChanging();
					this._forbit_date = value;
					this.SendPropertyChanged("forbit_date");
					this.Onforbit_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forbit_reason", DbType="VarChar(500)")]
		public string forbit_reason
		{
			get
			{
				return this._forbit_reason;
			}
			set
			{
				if ((this._forbit_reason != value))
				{
					this.Onforbit_reasonChanging(value);
					this.SendPropertyChanging();
					this._forbit_reason = value;
					this.SendPropertyChanged("forbit_reason");
					this.Onforbit_reasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_login_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> last_login_date
		{
			get
			{
				return this._last_login_date;
			}
			set
			{
				if ((this._last_login_date != value))
				{
					this.Onlast_login_dateChanging(value);
					this.SendPropertyChanging();
					this._last_login_date = value;
					this.SendPropertyChanged("last_login_date");
					this.Onlast_login_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_continual_error_times", DbType="Int")]
		public System.Nullable<int> continual_error_times
		{
			get
			{
				return this._continual_error_times;
			}
			set
			{
				if ((this._continual_error_times != value))
				{
					this.Oncontinual_error_timesChanging(value);
					this.SendPropertyChanging();
					this._continual_error_times = value;
					this.SendPropertyChanged("continual_error_times");
					this.Oncontinual_error_timesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(500)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_GroupUsers", Storage="_GroupUsers", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<GroupUsers> GroupUsers
		{
			get
			{
				return this._GroupUsers;
			}
			set
			{
				this._GroupUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupUsers(GroupUsers entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_GroupUsers(GroupUsers entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
}
#pragma warning restore 1591
